<!DOCTYPE html>
<html lang="th">
<script type="module">
  // Import the functions you need from the SDKs you need
  import { initializeApp } from "https://www.gstatic.com/firebasejs/12.2.1/firebase-app.js";
  import { getAnalytics } from "https://www.gstatic.com/firebasejs/12.2.1/firebase-analytics.js";
  // TODO: Add SDKs for Firebase products that you want to use
  // https://firebase.google.com/docs/web/setup#available-libraries

  // Your web app's Firebase configuration
  // For Firebase JS SDK v7.20.0 and later, measurementId is optional
  const firebaseConfig = {
    apiKey: "AIzaSyApXPu9_O_LuCrf7Dw30Ek-GSyVZ1Bwoo4",
    authDomain: "student-tracker-web.firebaseapp.com",
    projectId: "student-tracker-web",
    storageBucket: "student-tracker-web.firebasestorage.app",
    messagingSenderId: "249139563603",
    appId: "1:249139563603:web:6174f9f538d34d84a2caa6",
    measurementId: "G-9YTK5Z77TS"
  };

  // Initialize Firebase
  const app = initializeApp(firebaseConfig);
  const analytics = getAnalytics(app);
</script>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô - Firebase</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <!-- Firebase SDK -->
    <script type="module">
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
        import { getFirestore, collection, addDoc, getDocs, doc, updateDoc, deleteDoc, onSnapshot, query, where, orderBy } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';
        
        // Firebase configuration will be set here
        window.firebaseConfig = null;
        window.db = null;
        window.firebaseApp = null;
        
        // Firebase functions
        window.initFirebase = function(config) {
            try {
                window.firebaseApp = initializeApp(config);
                window.db = getFirestore(window.firebaseApp);
                window.firebaseInitialized = true;
                console.log('Firebase initialized successfully');
                return true;
            } catch (error) {
                console.error('Firebase initialization failed:', error);
                return false;
            }
        };
        
        window.saveToFirestore = async function(collectionName, data) {
            if (!window.db) throw new Error('Firebase not initialized');
            const docRef = await addDoc(collection(window.db, collectionName), {
                ...data,
                createdAt: new Date(),
                updatedAt: new Date()
            });
            return docRef.id;
        };
        
        window.getFromFirestore = async function(collectionName, conditions = null) {
            if (!window.db) throw new Error('Firebase not initialized');
            let q = collection(window.db, collectionName);
            
            if (conditions) {
                if (conditions.where) {
                    q = query(q, where(conditions.where.field, conditions.where.operator, conditions.where.value));
                }
                if (conditions.orderBy) {
                    q = query(q, orderBy(conditions.orderBy.field, conditions.orderBy.direction || 'asc'));
                }
            }
            
            const querySnapshot = await getDocs(q);
            const results = [];
            querySnapshot.forEach((doc) => {
                results.push({ id: doc.id, ...doc.data() });
            });
            return results;
        };
        
        window.updateFirestore = async function(collectionName, docId, data) {
            if (!window.db) throw new Error('Firebase not initialized');
            const docRef = doc(window.db, collectionName, docId);
            await updateDoc(docRef, {
                ...data,
                updatedAt: new Date()
            });
        };
        
        window.deleteFromFirestore = async function(collectionName, docId) {
            if (!window.db) throw new Error('Firebase not initialized');
            await deleteDoc(doc(window.db, collectionName, docId));
        };
        
        window.listenToFirestore = function(collectionName, callback, conditions = null) {
            if (!window.db) throw new Error('Firebase not initialized');
            let q = collection(window.db, collectionName);
            
            if (conditions) {
                if (conditions.where) {
                    q = query(q, where(conditions.where.field, conditions.where.operator, conditions.where.value));
                }
                if (conditions.orderBy) {
                    q = query(q, orderBy(conditions.orderBy.field, conditions.orderBy.direction || 'asc'));
                }
            }
            
            return onSnapshot(q, (querySnapshot) => {
                const results = [];
                querySnapshot.forEach((doc) => {
                    results.push({ id: doc.id, ...doc.data() });
                });
                callback(results);
            });
        };
    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Sarabun:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Sarabun', sans-serif; }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <!-- Header -->
    <header class="bg-white shadow-lg">
        <div class="container mx-auto px-6 py-4">
            <div class="flex items-center justify-between">
                <h1 class="text-2xl font-bold text-gray-800">üî• ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô - Firebase</h1>
                <div class="flex items-center space-x-4">
                    <!-- Firebase Status -->
                    <div id="firebaseStatus" class="flex items-center space-x-2">
                        <div id="connectionStatus" class="w-3 h-3 bg-red-500 rounded-full"></div>
                        <span id="statusText" class="text-sm text-gray-600">‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</span>
                    </div>
                    <button id="connectFirebaseBtn" class="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm">
                        üî• ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
                    </button>
                    <button id="studentBtn" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                        üë®‚Äçüéì ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                    </button>
                    <button id="teacherBtn" class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                        üë©‚Äçüè´ ‡∏Ñ‡∏£‡∏π
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Firebase Setup Modal -->
    <div id="firebaseSetupModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-xl shadow-2xl max-w-5xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <div class="flex justify-between items-start mb-6">
                    <div>
                        <h3 class="text-xl font-bold text-gray-800">üî• ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase Firestore</h3>
                        <p class="text-gray-600 mt-1">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firebase ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Real-time</p>
                    </div>
                    <button onclick="closeFirebaseSetup()" class="text-gray-400 hover:text-gray-600 text-2xl">‚úï</button>
                </div>

                <div class="space-y-6">
                    <!-- Quick Help Section -->
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
                        <h4 class="text-lg font-bold text-yellow-800 mb-4">üÜò ‡∏•‡∏∑‡∏°‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Firebase Config ‡πÅ‡∏•‡πâ‡∏ß?</h4>
                        <div class="space-y-4">
                            <div class="bg-white rounded p-4 border-l-4 border-yellow-400">
                                <strong class="text-yellow-800">üìç ‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏≤ Firebase Config ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ:</strong>
                                <ol class="mt-2 ml-4 list-decimal text-sm space-y-2">
                                    <li>‡πÑ‡∏õ‡∏ó‡∏µ‡πà <a href="https://console.firebase.google.com" target="_blank" class="text-blue-600 underline font-medium">console.firebase.google.com</a></li>
                                    <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß</li>
                                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô ‚öôÔ∏è (Settings) ‡∏Ç‡πâ‡∏≤‡∏á‡πÜ "Project Overview"</li>
                                    <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Project settings"</li>
                                    <li>‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô "Your apps"</li>
                                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ (‡∏à‡∏∞‡∏°‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô &lt;/&gt;)</li>
                                    <li>‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô "SDK setup and configuration"</li>
                                    <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Config" (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà npm)</li>
                                    <li>‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î firebaseConfig ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</li>
                                </ol>
                            </div>
                            
                            <div class="bg-blue-50 rounded p-4 border-l-4 border-blue-400">
                                <strong class="text-blue-800">üîç ‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÅ‡∏≠‡∏õ? ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà:</strong>
                                <ol class="mt-2 ml-4 list-decimal text-sm space-y-1">
                                    <li>‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Project settings</li>
                                    <li>‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô "Your apps"</li>
                                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å "Add app" ‚Üí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Web" (&lt;/&gt;)</li>
                                    <li>‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ ‡πÄ‡∏ä‡πà‡∏ô "Student Tracker"</li>
                                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å "Register app"</li>
                                    <li>‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å firebaseConfig ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤</li>
                                </ol>
                            </div>
                        </div>
                    </div>

                    <!-- Step 1: Create Firebase Project -->
                    <div class="bg-orange-50 rounded-lg p-6">
                        <h4 class="text-lg font-bold text-orange-800 mb-4">üöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á Firebase Project (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)</h4>
                        <div class="space-y-4">
                            <div class="bg-white rounded p-4 border-l-4 border-orange-400">
                                <strong>1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Firebase Console:</strong>
                                <ul class="mt-2 ml-4 list-disc text-sm">
                                    <li>‡πÄ‡∏õ‡∏¥‡∏î <a href="https://console.firebase.google.com" target="_blank" class="text-blue-600 underline">console.firebase.google.com</a></li>
                                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å "Create a project" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå"</li>
                                    <li>‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ‡πÄ‡∏ä‡πà‡∏ô "student-tracker"</li>
                                    <li>‡∏õ‡∏¥‡∏î Google Analytics (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)</li>
                                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å "Create project"</li>
                                </ul>
                            </div>
                            
                            <div class="bg-white rounded p-4 border-l-4 border-blue-400">
                                <strong>2. ‡πÄ‡∏û‡∏¥‡πà‡∏° Web App:</strong>
                                <ul class="mt-2 ml-4 list-disc text-sm">
                                    <li>‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Project Overview ‡∏Ñ‡∏•‡∏¥‡∏Å "Web" (&lt;/&gt;)</li>
                                    <li>‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ ‡πÄ‡∏ä‡πà‡∏ô "Student Tracker Web"</li>
                                    <li>‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Firebase Hosting</li>
                                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å "Register app"</li>
                                </ul>
                            </div>
                            
                            <div class="bg-white rounded p-4 border-l-4 border-green-400">
                                <strong>3. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Firebase Config:</strong>
                                <div class="mt-2 text-sm">
                                    <p>‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:</p>
                                    <div class="bg-gray-900 text-green-400 p-3 rounded mt-2 text-xs font-mono">
const firebaseConfig = {<br>
&nbsp;&nbsp;apiKey: "AIza...",<br>
&nbsp;&nbsp;authDomain: "your-project.firebaseapp.com",<br>
&nbsp;&nbsp;projectId: "your-project",<br>
&nbsp;&nbsp;storageBucket: "your-project.appspot.com",<br>
&nbsp;&nbsp;messagingSenderId: "123456789",<br>
&nbsp;&nbsp;appId: "1:123456789:web:abc123"<br>
};
                                    </div>
                                    <p class="mt-2 text-orange-600">üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô firebaseConfig ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 2: Setup Firestore -->
                    <div class="bg-blue-50 rounded-lg p-6">
                        <h4 class="text-lg font-bold text-blue-800 mb-4">üóÑÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firestore Database</h4>
                        <div class="space-y-4">
                            <div class="bg-white rounded p-4 border-l-4 border-blue-400">
                                <strong>1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Firestore Database:</strong>
                                <ul class="mt-2 ml-4 list-disc text-sm">
                                    <li>‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ã‡πâ‡∏≤‡∏¢ ‡∏Ñ‡∏•‡∏¥‡∏Å "Firestore Database"</li>
                                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å "Create database"</li>
                                    <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Start in test mode" (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)</li>
                                    <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å location ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÄ‡∏ä‡πà‡∏ô "asia-southeast1"</li>
                                    <li>‡∏Ñ‡∏•‡∏¥‡∏Å "Done"</li>
                                </ul>
                            </div>
                            
                            <div class="bg-white rounded p-4 border-l-4 border-yellow-400">
                                <strong>2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Security Rules (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!):</strong>
                                <ul class="mt-2 ml-4 list-disc text-sm">
                                    <li>‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö "Rules"</li>
                                    <li>‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà rules ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ:</li>
                                </ul>
                                <div class="bg-gray-900 text-green-400 p-3 rounded mt-2 text-xs font-mono">
rules_version = '2';<br>
service cloud.firestore {<br>
&nbsp;&nbsp;match /databases/{database}/documents {<br>
&nbsp;&nbsp;&nbsp;&nbsp;match /{document=**} {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allow read, write: if true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;}<br>
}
                                </div>
                                <p class="mt-2 text-xs text-yellow-700">‚ö†Ô∏è ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô rules ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</p>
                            </div>
                        </div>
                    </div>

                    <!-- Step 3: Connect to System -->
                    <div class="bg-green-50 rounded-lg p-6">
                        <h4 class="text-lg font-bold text-green-800 mb-4">üîó ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö</h4>
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">üìã ‡∏ß‡∏≤‡∏á Firebase Config ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà:</label>
                                <textarea id="firebaseConfigInput" 
                                         class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent font-mono text-sm" 
                                         rows="8"
                                         placeholder='const firebaseConfig = {
  apiKey: "AIza...",
  authDomain: "your-project.firebaseapp.com",
  projectId: "your-project",
  storageBucket: "your-project.appspot.com",
  messagingSenderId: "123456789",
  appId: "1:123456789:web:abc123"
};'></textarea>
                                <p class="text-xs text-gray-500 mt-1">‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î firebaseConfig ‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô</p>
                            </div>
                            
                            <!-- Visual Guide -->
                            <div class="bg-white rounded p-4 border border-gray-200">
                                <h5 class="font-semibold text-gray-800 mb-3">üñºÔ∏è ‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏≤ Config:</h5>
                                <div class="grid md:grid-cols-2 gap-4 text-sm">
                                    <div class="space-y-2">
                                        <div class="bg-gray-100 p-3 rounded">
                                            <strong>1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Project Settings</strong><br>
                                            <span class="text-gray-600">‚öôÔ∏è ‚Üí Project settings</span>
                                        </div>
                                        <div class="bg-gray-100 p-3 rounded">
                                            <strong>2. ‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô "Your apps"</strong><br>
                                            <span class="text-gray-600">‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á</span>
                                        </div>
                                    </div>
                                    <div class="space-y-2">
                                        <div class="bg-gray-100 p-3 rounded">
                                            <strong>3. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏õ Web</strong><br>
                                            <span class="text-gray-600">‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô &lt;/&gt;</span>
                                        </div>
                                        <div class="bg-gray-100 p-3 rounded">
                                            <strong>4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Config"</strong><br>
                                            <span class="text-gray-600">‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Demo Mode -->
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <div class="flex items-center mb-2">
                            <input type="checkbox" id="demoMode" class="mr-2">
                            <label for="demoMode" class="text-sm font-medium text-yellow-800">üß™ ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)</label>
                        </div>
                        <p class="text-xs text-yellow-700">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firebase</p>
                    </div>

                    <!-- Benefits -->
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <h5 class="font-semibold text-blue-800 mb-3">üéâ ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á Firebase Firestore:</h5>
                        <div class="grid md:grid-cols-2 gap-4 text-sm text-blue-700">
                            <div class="space-y-2">
                                <div class="flex items-center">
                                    <span class="mr-2">‚ö°</span>
                                    <span><strong>Real-time:</strong> ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</span>
                                </div>
                                <div class="flex items-center">
                                    <span class="mr-2">üÜì</span>
                                    <span><strong>‡∏ü‡∏£‡∏µ:</strong> 50,000 ‡∏≠‡πà‡∏≤‡∏ô/‡∏ß‡∏±‡∏ô</span>
                                </div>
                                <div class="flex items-center">
                                    <span class="mr-2">üîí</span>
                                    <span><strong>‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:</strong> ‡∏°‡∏µ Security Rules</span>
                                </div>
                            </div>
                            <div class="space-y-2">
                                <div class="flex items-center">
                                    <span class="mr-2">üì±</span>
                                    <span><strong>Multi-platform:</strong> Web, Mobile</span>
                                </div>
                                <div class="flex items-center">
                                    <span class="mr-2">‚òÅÔ∏è</span>
                                    <span><strong>Cloud:</strong> ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà</span>
                                </div>
                                <div class="flex items-center">
                                    <span class="mr-2">üîÑ</span>
                                    <span><strong>Offline:</strong> ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö offline ‡πÑ‡∏î‡πâ</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="flex justify-end space-x-3">
                        <button onclick="closeFirebaseSetup()" 
                                class="px-6 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors">
                            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                        </button>
                        <button onclick="connectToFirebase()" 
                                class="px-6 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors">
                            üî• ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Student Section -->
    <div id="studentSection" class="container mx-auto px-6 py-8">
        <div class="max-w-4xl mx-auto">
            <div class="bg-white rounded-xl shadow-lg p-8">
                <h2 class="text-xl font-semibold text-gray-800 mb-6">üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô</h2>
                
                <div class="grid md:grid-cols-3 gap-4 mb-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</label>
                        <input type="text" id="studentId" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</label>
                        <select id="classSelect" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">‡∏ß‡∏¥‡∏ä‡∏≤</label>
                        <select id="subjectSelect" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤</option>
                        </select>
                    </div>
                </div>

                <button id="searchBtn" class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium">
                    üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                </button>

                <!-- Search Results -->
                <div id="searchResults" class="mt-8 hidden">
                    <!-- Student Info Card -->
                    <div id="studentInfo" class="bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl p-6 mb-6">
                        <div class="flex items-center space-x-4">
                            <div class="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center text-2xl">
                                üë®‚Äçüéì
                            </div>
                            <div>
                                <h3 class="text-xl font-bold" id="studentName">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h3>
                                <p class="opacity-90" id="studentDetails">‡∏£‡∏´‡∏±‡∏™: - | ‡∏´‡πâ‡∏≠‡∏á: - | ‡∏ß‡∏¥‡∏ä‡∏≤: -</p>
                            </div>
                        </div>
                    </div>

                    <!-- Statistics Cards -->
                    <div class="grid md:grid-cols-4 gap-4 mb-6">
                        <div class="bg-white rounded-lg p-4 shadow-md border-l-4 border-green-500">
                            <div class="flex items-center">
                                <div class="text-green-500 text-2xl mr-3">‚úÖ</div>
                                <div>
                                    <p class="text-sm text-gray-600">‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</p>
                                    <p class="text-xl font-bold text-gray-800" id="submittedCount">0</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-white rounded-lg p-4 shadow-md border-l-4 border-red-500">
                            <div class="flex items-center">
                                <div class="text-red-500 text-2xl mr-3">‚ùå</div>
                                <div>
                                    <p class="text-sm text-gray-600">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á</p>
                                    <p class="text-xl font-bold text-gray-800" id="notSubmittedCount">0</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-white rounded-lg p-4 shadow-md border-l-4 border-yellow-500">
                            <div class="flex items-center">
                                <div class="text-yellow-500 text-2xl mr-3">‚è∞</div>
                                <div>
                                    <p class="text-sm text-gray-600">‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î</p>
                                    <p class="text-xl font-bold text-gray-800" id="overdueCount">0</p>
                                </div>
                            </div>
                        </div>
                        <div class="bg-white rounded-lg p-4 shadow-md border-l-4 border-blue-500">
                            <div class="flex items-center">
                                <div class="text-blue-500 text-2xl mr-3">üìä</div>
                                <div>
                                    <p class="text-sm text-gray-600">‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå</p>
                                    <p class="text-xl font-bold text-gray-800" id="completionRate">0%</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <h3 class="text-lg font-semibold text-gray-800 mb-4">üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô</h3>
                    
                    <!-- Assignment Cards -->
                    <div class="space-y-4" id="assignmentCards">
                    </div>

                    <!-- Traditional Table (Hidden by default) -->
                    <div id="tableView" class="hidden">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-semibold text-gray-800">üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ</h3>
                            <button id="toggleView" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors">
                                üìä ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
                            </button>
                        </div>
                        <div class="overflow-x-auto">
                            <table class="w-full bg-white border border-gray-200 rounded-lg">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">‡∏á‡∏≤‡∏ô</th>
                                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">‡∏ß‡∏¥‡∏ä‡∏≤</th>
                                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á</th>
                                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á</th>
                                    </tr>
                                </thead>
                                <tbody id="resultsTable">
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Toggle View Button -->
                    <div class="mt-6 text-center">
                        <button id="toggleViewBtn" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                            üìä ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Teacher Section -->
    <div id="teacherSection" class="container mx-auto px-6 py-8 hidden">
        <div class="max-w-6xl mx-auto">
            <!-- Firebase Status -->
            <div id="firebaseStatusCard" class="bg-white rounded-xl shadow-lg p-6 mb-8 hidden">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="w-4 h-4 bg-orange-500 rounded-full animate-pulse"></div>
                        <span class="text-orange-700 font-medium">üî• ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firebase Firestore</span>
                        <span id="realTimeIndicator" class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">Real-time</span>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="syncWithFirebase()" class="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm">
                            üîÑ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        </button>
                        <button onclick="exportFirebaseData()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm">
                            üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        </button>
                        <button onclick="clearAllFirebaseData()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm">
                            üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        </button>
                    </div>
                </div>
            </div>

            <!-- Class & Subject Management -->
            <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
                <h2 class="text-xl font-semibold text-gray-800 mb-6">üè´ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤</h2>
                
                <div class="grid md:grid-cols-2 gap-8">
                    <!-- Class Management -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-700 mb-4">üìö ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h3>
                        <div class="space-y-4">
                            <div class="flex space-x-2">
                                <input type="text" id="classNameInput" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏°.6/1, ‡∏õ.4/2, ‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏• 1)" class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <button onclick="addClass()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                                    ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°
                                </button>
                            </div>
                            <div class="text-xs text-gray-500 mb-2">
                                üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏°.1/1, ‡∏°.2/3, ‡∏õ.5/2, ‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏• 1, ‡∏õ.6 ‡∏ß‡∏¥‡∏ó‡∏¢‡πå-‡∏Ñ‡∏ì‡∏¥‡∏ï
                            </div>
                            <div id="classList" class="space-y-2 max-h-40 overflow-y-auto">
                                <!-- Classes will be listed here -->
                            </div>
                        </div>
                    </div>
                    
                    <!-- Subject Management -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-700 mb-4">üìñ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤</h3>
                        <div class="space-y-4">
                            <div class="flex space-x-2">
                                <input type="text" id="subjectName" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤" class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                                <button onclick="addSubject()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                                    ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°
                                </button>
                            </div>
                            <div id="subjectList" class="space-y-2 max-h-40 overflow-y-auto">
                                <!-- Subjects will be listed here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Upload Section -->
            <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
                <h2 class="text-xl font-semibold text-gray-800 mb-6">üì§ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h2>
                
                <!-- Class Selection for Upload -->
                <div class="grid md:grid-cols-2 gap-4 mb-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î</label>
                        <select id="uploadClassSelect" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î</label>
                        <select id="uploadSubjectSelect" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤</option>
                        </select>
                    </div>
                </div>
                
                <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                    <input type="file" id="excelFile" accept=".xlsx,.xls" class="hidden">
                    <button onclick="document.getElementById('excelFile').click()" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors">
                        üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel
                    </button>
                    <p class="text-gray-500 mt-2">‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .xlsx ‡πÅ‡∏•‡∏∞ .xls</p>
                    <p class="text-sm text-gray-400 mt-1">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô | ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</p>
                    <p class="text-xs text-blue-600 mt-2">üí° ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô</p>
                    <div id="firebaseConnected" class="mt-4 hidden">
                        <div class="inline-flex items-center px-3 py-1 bg-orange-100 text-orange-800 rounded-full text-sm">
                            <span class="mr-1">üî•</span>
                            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô Firebase ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                        </div>
                    </div>
                </div>
            </div>

            <!-- Assignment Management -->
            <div class="bg-white rounded-xl shadow-lg p-8">
                <h2 class="text-xl font-semibold text-gray-800 mb-6">üìù ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô</h2>
                
                <!-- Add Assignment Form -->
                <div class="grid md:grid-cols-4 gap-4 mb-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô</label>
                        <input type="text" id="assignmentName" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">‡∏ß‡∏¥‡∏ä‡∏≤</label>
                        <select id="assignmentSubject" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</label>
                        <select id="assignmentClass" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á</label>
                        <input type="date" id="dueDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                    </div>
                </div>

                <button id="addAssignmentBtn" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium mb-8">
                    ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô
                </button>

                <!-- Assignments List -->
                <div id="assignmentsList">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-lg font-semibold text-gray-800">üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô</h3>
                        <div class="flex space-x-2">
                            <select id="filterClass" class="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500">
                                <option value="">‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</option>
                            </select>
                            <select id="filterSubject" class="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500">
                                <option value="">‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤</option>
                            </select>
                        </div>
                    </div>
                    <div id="assignmentsContainer">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Assignment Detail Modal -->
    <div id="assignmentModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <!-- Modal Header -->
                <div class="flex justify-between items-start mb-6">
                    <div>
                        <h3 class="text-xl font-bold text-gray-800" id="modalTitle">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô</h3>
                        <p class="text-gray-600 mt-1" id="modalSubtitle">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</p>
                    </div>
                    <button onclick="closeAssignmentModal()" class="text-gray-400 hover:text-gray-600 text-2xl">
                        ‚úï
                    </button>
                </div>

                <!-- Assignment Info -->
                <div class="space-y-4 mb-6">
                    <div class="bg-gray-50 rounded-lg p-4">
                        <div class="grid md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô</label>
                                <p class="text-gray-900" id="modalAssignmentName">-</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">‡∏ß‡∏¥‡∏ä‡∏≤</label>
                                <p class="text-gray-900" id="modalSubject">-</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</label>
                                <p class="text-gray-900" id="modalClass">-</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á</label>
                                <p class="text-gray-900" id="modalDueDate">-</p>
                            </div>
                        </div>
                    </div>

                    <!-- Status Card -->
                    <div id="modalStatusCard" class="rounded-lg p-4">
                        <div class="flex items-center justify-between">
                            <div>
                                <h4 class="font-semibold text-lg mb-2" id="modalStatusTitle">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô</h4>
                                <div class="flex items-center space-x-4">
                                    <span id="modalStatusBadge" class="px-3 py-1 rounded-full text-sm font-medium">-</span>
                                    <span id="modalSubmissionDate" class="text-sm text-gray-600">-</span>
                                </div>
                            </div>
                            <div class="text-4xl" id="modalStatusIcon">üìù</div>
                        </div>
                    </div>

                    <!-- Time Info -->
                    <div class="bg-blue-50 rounded-lg p-4">
                        <h4 class="font-semibold text-gray-800 mb-2">‚è∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤</h4>
                        <div id="modalTimeInfo" class="text-sm text-gray-700">
                            <p id="modalDaysInfo">-</p>
                            <p id="modalAdvice" class="mt-2 font-medium">-</p>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="flex justify-end space-x-3">
                    <button onclick="closeAssignmentModal()" 
                            class="px-6 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors">
                        ‡∏õ‡∏¥‡∏î
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Firebase Integration Variables
        let firebaseConnected = false;
        let isDemoMode = false;
        let realTimeListeners = [];

        // Data storage
        let students = [];
        let assignments = [];
        let submissions = {};
        let classes = ['‡∏°.6/1', '‡∏°.6/2']; // Available classes
        let subjects = ['‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå', '‡πÄ‡∏Ñ‡∏°‡∏µ', '‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤']; // Available subjects

        // Sample data
        const sampleStudents = [
            { id: '65001', name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', class: '‡∏°.6/1', subject: '‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
            { id: '65002', name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', class: '‡∏°.6/1', subject: '‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
            { id: '65003', name: '‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å', class: '‡∏°.6/2', subject: '‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå' },
            { id: '65004', name: '‡∏°‡∏≤‡∏•‡∏µ ‡∏Ç‡∏¢‡∏±‡∏ô‡∏î‡∏µ', class: '‡∏°.6/2', subject: '‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå' }
        ];

        const sampleAssignments = [
            { id: 1, name: '‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1', subject: '‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', class: '‡∏°.6/1', dueDate: '2024-01-15' },
            { id: 2, name: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå', subject: '‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå', class: '‡∏°.6/2', dueDate: '2024-01-20' }
        ];

        // Firebase Functions
        function showFirebaseSetup() {
            document.getElementById('firebaseSetupModal').classList.remove('hidden');
        }

        function closeFirebaseSetup() {
            document.getElementById('firebaseSetupModal').classList.add('hidden');
        }

        async function connectToFirebase() {
            const configInput = document.getElementById('firebaseConfigInput').value;
            const demoMode = document.getElementById('demoMode').checked;
            
            if (demoMode) {
                // Demo mode - simulate connection
                isDemoMode = true;
                firebaseConnected = true;
                updateFirebaseStatus(true, '‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
                document.getElementById('firebaseStatusCard').classList.remove('hidden');
                document.getElementById('firebaseConnected').classList.remove('hidden');
                closeFirebaseSetup();
                showNotification('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üß™', 'success');
                loadSampleData();
                return;
            }
            
            if (!configInput.trim()) {
                showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á Firebase Config', 'error');
                return;
            }
            
            try {
                // Extract config from input
                const configMatch = configInput.match(/const\s+firebaseConfig\s*=\s*({[\s\S]*?});/);
                if (!configMatch) {
                    throw new Error('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Firebase Config ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
                }
                
                const configStr = configMatch[1];
                const config = eval('(' + configStr + ')');
                
                // Validate required fields
                const requiredFields = ['apiKey', 'authDomain', 'projectId'];
                for (const field of requiredFields) {
                    if (!config[field]) {
                        throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö ${field} ‡πÉ‡∏ô Firebase Config`);
                    }
                }
                
                // Initialize Firebase
                const success = window.initFirebase(config);
                if (success) {
                    firebaseConnected = true;
                    updateFirebaseStatus(true, '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß');
                    document.getElementById('firebaseStatusCard').classList.remove('hidden');
                    document.getElementById('firebaseConnected').classList.remove('hidden');
                    closeFirebaseSetup();
                    
                    // Load data from Firebase
                    await loadDataFromFirebase();
                    
                    // Setup real-time listeners
                    setupRealTimeListeners();
                    
                    showNotification('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üî•', 'success');
                } else {
                    throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase ‡πÑ‡∏î‡πâ');
                }
                
            } catch (error) {
                console.error('Firebase connection failed:', error);
                showNotification(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: ${error.message}`, 'error');
            }
        }

        function updateFirebaseStatus(connected, text) {
            const statusDot = document.getElementById('connectionStatus');
            const statusText = document.getElementById('statusText');
            const connectBtn = document.getElementById('connectFirebaseBtn');
            
            if (connected) {
                statusDot.className = 'w-3 h-3 bg-orange-500 rounded-full';
                statusText.textContent = text;
                connectBtn.textContent = 'üî• ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß';
                connectBtn.className = 'px-4 py-2 bg-orange-600 text-white rounded-lg cursor-default text-sm';
            } else {
                statusDot.className = 'w-3 h-3 bg-red-500 rounded-full';
                statusText.textContent = '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
                connectBtn.textContent = 'üî• ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase';
                connectBtn.className = 'px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm';
            }
        }

        // Load sample data for demo mode
        function loadSampleData() {
            students = [...sampleStudents];
            assignments = [...sampleAssignments];
            submissions = {
                '65001-1': { submitted: true, date: '2024-01-14' },
                '65002-1': { submitted: false },
                '65003-2': { submitted: true, date: '2024-01-18' },
                '65004-2': { submitted: false }
            };
            
            updateAllDropdowns();
            renderClassList();
            renderSubjectList();
            updateAssignmentFilters();
            renderAssignments();
        }

        // Load data from Firebase
        async function loadDataFromFirebase() {
            if (!firebaseConnected || isDemoMode) {
                loadSampleData();
                return;
            }
            
            try {
                showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase...', 'info');
                
                // Load students
                const firebaseStudents = await window.getFromFirestore('students');
                students = firebaseStudents.length > 0 ? firebaseStudents : [...sampleStudents];
                
                // Load assignments
                const firebaseAssignments = await window.getFromFirestore('assignments');
                assignments = firebaseAssignments.length > 0 ? firebaseAssignments : [...sampleAssignments];
                
                // Load submissions
                const firebaseSubmissions = await window.getFromFirestore('submissions');
                submissions = {};
                firebaseSubmissions.forEach(sub => {
                    submissions[sub.key] = { submitted: sub.submitted, date: sub.date };
                });
                
                // Load classes and subjects
                const firebaseClasses = await window.getFromFirestore('classes');
                const firebaseSubjects = await window.getFromFirestore('subjects');
                
                if (firebaseClasses.length > 0) {
                    classes = firebaseClasses.map(c => c.name);
                }
                if (firebaseSubjects.length > 0) {
                    subjects = firebaseSubjects.map(s => s.name);
                }
                
                // If no data exists, save sample data
                if (firebaseStudents.length === 0) {
                    await saveStudentsToFirebase();
                }
                if (firebaseAssignments.length === 0) {
                    await saveAssignmentsToFirebase();
                }
                
                updateAllDropdowns();
                renderClassList();
                renderSubjectList();
                updateAssignmentFilters();
                renderAssignments();
                
                showNotification('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üìä', 'success');
                
            } catch (error) {
                console.error('Failed to load data from Firebase:', error);
                showNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á', 'error');
                loadSampleData();
            }
        }

        // Setup real-time listeners
        function setupRealTimeListeners() {
            if (!firebaseConnected || isDemoMode) return;
            
            try {
                // Listen to students changes
                const studentsUnsubscribe = window.listenToFirestore('students', (data) => {
                    students = data;
                    updateAllDropdowns();
                    console.log('Students updated via real-time listener');
                });
                realTimeListeners.push(studentsUnsubscribe);
                
                // Listen to assignments changes
                const assignmentsUnsubscribe = window.listenToFirestore('assignments', (data) => {
                    assignments = data;
                    updateAssignmentFilters();
                    renderAssignments();
                    console.log('Assignments updated via real-time listener');
                });
                realTimeListeners.push(assignmentsUnsubscribe);
                
                // Listen to submissions changes
                const submissionsUnsubscribe = window.listenToFirestore('submissions', (data) => {
                    submissions = {};
                    data.forEach(sub => {
                        submissions[sub.key] = { submitted: sub.submitted, date: sub.date };
                    });
                    renderAssignments();
                    console.log('Submissions updated via real-time listener');
                });
                realTimeListeners.push(submissionsUnsubscribe);
                
                console.log('Real-time listeners setup complete');
                
            } catch (error) {
                console.error('Failed to setup real-time listeners:', error);
            }
        }

        // Save functions to Firebase
        async function saveStudentsToFirebase() {
            if (!firebaseConnected || isDemoMode) return;
            
            try {
                for (const student of students) {
                    if (!student.firebaseId) {
                        const docId = await window.saveToFirestore('students', student);
                        student.firebaseId = docId;
                    }
                }
                console.log('Students saved to Firebase');
            } catch (error) {
                console.error('Failed to save students:', error);
            }
        }

        async function saveAssignmentsToFirebase() {
            if (!firebaseConnected || isDemoMode) return;
            
            try {
                for (const assignment of assignments) {
                    if (!assignment.firebaseId) {
                        const docId = await window.saveToFirestore('assignments', assignment);
                        assignment.firebaseId = docId;
                    }
                }
                console.log('Assignments saved to Firebase');
            } catch (error) {
                console.error('Failed to save assignments:', error);
            }
        }

        async function saveSubmissionsToFirebase() {
            if (!firebaseConnected || isDemoMode) return;
            
            try {
                for (const [key, submission] of Object.entries(submissions)) {
                    await window.saveToFirestore('submissions', {
                        key: key,
                        submitted: submission.submitted,
                        date: submission.date || null
                    });
                }
                console.log('Submissions saved to Firebase');
            } catch (error) {
                console.error('Failed to save submissions:', error);
            }
        }

        // Sync with Firebase
        async function syncWithFirebase() {
            if (!firebaseConnected) {
                showNotification('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase', 'error');
                return;
            }
            
            if (isDemoMode) {
                showNotification('‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö) üîÑ', 'info');
                return;
            }
            
            try {
                showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö Firebase...', 'info');
                
                await saveStudentsToFirebase();
                await saveAssignmentsToFirebase();
                await saveSubmissionsToFirebase();
                
                showNotification('‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö Firebase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üîÑ', 'success');
            } catch (error) {
                console.error('Sync failed:', error);
                showNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ', 'error');
            }
        }

        // Export Firebase data
        async function exportFirebaseData() {
            try {
                const data = {
                    students,
                    assignments,
                    submissions,
                    classes,
                    subjects,
                    exportDate: new Date().toISOString(),
                    source: firebaseConnected ? (isDemoMode ? 'demo' : 'firebase') : 'local'
                };
                
                const dataStr = JSON.stringify(data, null, 2);
                const dataBlob = new Blob([dataStr], {type: 'application/json'});
                
                const link = document.createElement('a');
                link.href = URL.createObjectURL(dataBlob);
                link.download = `firebase-student-data-${new Date().toISOString().split('T')[0]}.json`;
                link.click();
                
                showNotification('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firebase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üì§', 'success');
            } catch (error) {
                console.error('Export failed:', error);
                showNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ', 'error');
            }
        }

        // Clear all Firebase data
        async function clearAllFirebaseData() {
            if (!confirm('‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Firebase?\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö:\n- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\n‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ!')) {
                return;
            }
            
            try {
                if (firebaseConnected && !isDemoMode) {
                    showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firebase...', 'info');
                    
                    // Delete all collections (in a real app, you'd need to implement batch delete)
                    // For now, we'll just reset local data and let it sync
                }
                
                // Reset to sample data
                students = [...sampleStudents];
                assignments = [...sampleAssignments];
                submissions = {
                    '65001-1': { submitted: true, date: '2024-01-14' },
                    '65002-1': { submitted: false },
                    '65003-2': { submitted: true, date: '2024-01-18' },
                    '65004-2': { submitted: false }
                };
                classes = ['‡∏°.6/1', '‡∏°.6/2'];
                subjects = ['‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå', '‡πÄ‡∏Ñ‡∏°‡∏µ', '‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤'];
                
                // Update UI
                updateAllDropdowns();
                renderClassList();
                renderSubjectList();
                updateAssignmentFilters();
                renderAssignments();
                
                // Hide search results
                document.getElementById('searchResults').classList.add('hidden');
                
                // Sync with Firebase
                if (firebaseConnected && !isDemoMode) {
                    await syncWithFirebase();
                }
                
                showNotification('‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á üóëÔ∏è', 'success');
            } catch (error) {
                console.error('Clear data failed:', error);
                showNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ', 'error');
            }
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';
            
            notification.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-transform duration-300 translate-x-full`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 100);
            
            // Remove after 3 seconds
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // Class and Subject Management Functions
        async function addClass() {
            const className = document.getElementById('classNameInput').value.trim();
            
            if (!className) {
                showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', 'error');
                return;
            }
            
            if (classes.includes(className)) {
                showNotification('‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß', 'error');
                return;
            }
            
            classes.push(className);
            
            // Save to Firebase
            if (firebaseConnected && !isDemoMode) {
                try {
                    await window.saveToFirestore('classes', { name: className });
                } catch (error) {
                    console.error('Failed to save class to Firebase:', error);
                }
            }
            
            // Clear form
            document.getElementById('classNameInput').value = '';
            
            renderClassList();
            updateAllDropdowns();
            showNotification(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${className} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`, 'success');
        }

        async function removeClass(className) {
            const index = classes.indexOf(className);
            if (index > -1) {
                classes.splice(index, 1);
                
                renderClassList();
                updateAllDropdowns();
                showNotification(`‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${className} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`, 'success');
            }
        }

        async function addSubject() {
            const subjectName = document.getElementById('subjectName').value.trim();
            
            if (!subjectName) {
                showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤', 'error');
                return;
            }
            
            if (subjects.includes(subjectName)) {
                showNotification('‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß', 'error');
                return;
            }
            
            subjects.push(subjectName);
            
            // Save to Firebase
            if (firebaseConnected && !isDemoMode) {
                try {
                    await window.saveToFirestore('subjects', { name: subjectName });
                } catch (error) {
                    console.error('Failed to save subject to Firebase:', error);
                }
            }
            
            // Clear form
            document.getElementById('subjectName').value = '';
            
            renderSubjectList();
            updateAllDropdowns();
            showNotification(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤ ${subjectName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`, 'success');
        }

        async function removeSubject(subjectName) {
            const index = subjects.indexOf(subjectName);
            if (index > -1) {
                subjects.splice(index, 1);
                
                renderSubjectList();
                updateAllDropdowns();
                showNotification(`‡∏•‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤ ${subjectName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`, 'success');
            }
        }

        function renderClassList() {
            const container = document.getElementById('classList');
            container.innerHTML = '';
            
            if (classes.length === 0) {
                container.innerHTML = '<p class="text-gray-500 text-sm">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</p>';
                return;
            }
            
            classes.forEach(className => {
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between bg-blue-50 px-3 py-2 rounded border';
                div.innerHTML = `
                    <span class="text-blue-800 font-medium">${className}</span>
                    <button onclick="removeClass('${className}')" 
                            class="text-red-500 hover:text-red-700 text-sm">
                        üóëÔ∏è ‡∏•‡∏ö
                    </button>
                `;
                container.appendChild(div);
            });
        }

        function renderSubjectList() {
            const container = document.getElementById('subjectList');
            container.innerHTML = '';
            
            if (subjects.length === 0) {
                container.innerHTML = '<p class="text-gray-500 text-sm">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ä‡∏≤</p>';
                return;
            }
            
            subjects.forEach(subjectName => {
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between bg-green-50 px-3 py-2 rounded border';
                div.innerHTML = `
                    <span class="text-green-800 font-medium">${subjectName}</span>
                    <button onclick="removeSubject('${subjectName}')" 
                            class="text-red-500 hover:text-red-700 text-sm">
                        üóëÔ∏è ‡∏•‡∏ö
                    </button>
                `;
                container.appendChild(div);
            });
        }

        // UI Elements
        const studentBtn = document.getElementById('studentBtn');
        const teacherBtn = document.getElementById('teacherBtn');
        const studentSection = document.getElementById('studentSection');
        const teacherSection = document.getElementById('teacherSection');
        const connectFirebaseBtn = document.getElementById('connectFirebaseBtn');

        // Navigation
        studentBtn.addEventListener('click', () => {
            studentSection.classList.remove('hidden');
            teacherSection.classList.add('hidden');
            studentBtn.classList.add('bg-blue-600');
            studentBtn.classList.remove('bg-gray-400');
            teacherBtn.classList.add('bg-gray-400');
            teacherBtn.classList.remove('bg-green-600');
        });

        teacherBtn.addEventListener('click', () => {
            teacherSection.classList.remove('hidden');
            studentSection.classList.add('hidden');
            teacherBtn.classList.add('bg-green-600');
            teacherBtn.classList.remove('bg-gray-400');
            studentBtn.classList.add('bg-gray-400');
            studentBtn.classList.remove('bg-blue-600');
            updateAllDropdowns();
            renderClassList();
            renderSubjectList();
        });

        // Connect to Firebase
        connectFirebaseBtn.addEventListener('click', () => {
            if (!firebaseConnected) {
                showFirebaseSetup();
            }
        });

        // Excel file upload
        document.getElementById('excelFile').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const selectedClass = document.getElementById('uploadClassSelect').value;
                const selectedSubject = document.getElementById('uploadSubjectSelect').value;
                
                if (!selectedClass || !selectedSubject) {
                    showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå', 'error');
                    e.target.value = '';
                    return;
                }
                
                const reader = new FileReader();
                reader.onload = async function(e) {
                    try {
                        const data = new Uint8Array(e.target.result);
                        const workbook = XLSX.read(data, {type: 'array'});
                        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                        const jsonData = XLSX.utils.sheet_to_json(firstSheet, {header: 1});
                        
                        // Process Excel data (skip header row)
                        const newStudents = [];
                        for (let i = 1; i < jsonData.length; i++) {
                            const row = jsonData[i];
                            if (row[0] && row[1]) { // Only need student ID and name
                                // Check if student already exists
                                const existingStudent = students.find(s => s.id === row[0].toString());
                                if (!existingStudent) {
                                    newStudents.push({
                                        id: row[0].toString(),
                                        name: row[1],
                                        class: selectedClass,
                                        subject: selectedSubject
                                    });
                                }
                            }
                        }
                        
                        if (newStudents.length === 0) {
                            showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß', 'error');
                            return;
                        }
                        
                        students = [...students, ...newStudents];
                        
                        // Save to Firebase
                        if (firebaseConnected && !isDemoMode) {
                            try {
                                for (const student of newStudents) {
                                    await window.saveToFirestore('students', student);
                                }
                            } catch (error) {
                                console.error('Failed to save students to Firebase:', error);
                            }
                        }
                        
                        showNotification(`‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${newStudents.length} ‡∏Ñ‡∏ô ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ${selectedClass} ‡∏ß‡∏¥‡∏ä‡∏≤ ${selectedSubject}`, 'success');
                        updateAllDropdowns();
                        
                        // Reset file input
                        e.target.value = '';
                    } catch (error) {
                        showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel', 'error');
                        console.error(error);
                    }
                };
                reader.readAsArrayBuffer(file);
            }
        });

        // Update all dropdowns
        function updateAllDropdowns() {
            updateDropdowns();
            updateTeacherDropdowns();
            updateUploadDropdowns();
        }

        // Update student search dropdowns
        function updateDropdowns() {
            const classSelect = document.getElementById('classSelect');
            const subjectSelect = document.getElementById('subjectSelect');
            
            classSelect.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</option>';
            subjectSelect.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤</option>';
            
            classes.forEach(cls => {
                classSelect.innerHTML += `<option value="${cls}">${cls}</option>`;
            });
            
            subjects.forEach(subj => {
                subjectSelect.innerHTML += `<option value="${subj}">${subj}</option>`;
            });
        }

        // Update teacher assignment dropdowns
        function updateTeacherDropdowns() {
            const assignmentSubject = document.getElementById('assignmentSubject');
            const assignmentClass = document.getElementById('assignmentClass');
            
            assignmentSubject.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤</option>';
            assignmentClass.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</option>';
            
            classes.forEach(cls => {
                assignmentClass.innerHTML += `<option value="${cls}">${cls}</option>`;
            });
            
            subjects.forEach(subj => {
                assignmentSubject.innerHTML += `<option value="${subj}">${subj}</option>`;
            });
        }

        // Update upload dropdowns
        function updateUploadDropdowns() {
            const uploadClassSelect = document.getElementById('uploadClassSelect');
            const uploadSubjectSelect = document.getElementById('uploadSubjectSelect');
            
            uploadClassSelect.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</option>';
            uploadSubjectSelect.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤</option>';
            
            classes.forEach(cls => {
                uploadClassSelect.innerHTML += `<option value="${cls}">${cls}</option>`;
            });
            
            subjects.forEach(subj => {
                uploadSubjectSelect.innerHTML += `<option value="${subj}">${subj}</option>`;
            });
        }

        // Search functionality
        document.getElementById('searchBtn').addEventListener('click', () => {
            const studentId = document.getElementById('studentId').value;
            const selectedClass = document.getElementById('classSelect').value;
            const selectedSubject = document.getElementById('subjectSelect').value;
            
            if (!studentId) {
                showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', 'error');
                return;
            }
            
            // Find student info
            const student = students.find(s => s.id === studentId);
            
            let filteredAssignments = assignments;
            
            if (selectedClass) {
                filteredAssignments = filteredAssignments.filter(a => a.class === selectedClass);
            }
            
            if (selectedSubject) {
                filteredAssignments = filteredAssignments.filter(a => a.subject === selectedSubject);
            }
            
            // If student found, filter by their class and subject
            if (student) {
                if (!selectedClass) {
                    filteredAssignments = filteredAssignments.filter(a => a.class === student.class);
                }
                if (!selectedSubject) {
                    filteredAssignments = filteredAssignments.filter(a => a.subject === student.subject);
                }
            }
            
            // Update student info card
            updateStudentInfo(student, studentId, selectedClass, selectedSubject);
            
            // Calculate statistics
            const stats = calculateStatistics(studentId, filteredAssignments);
            updateStatistics(stats);
            
            // Render assignment cards
            renderAssignmentCards(studentId, filteredAssignments);
            
            // Render table
            renderResultsTable(studentId, filteredAssignments);
            
            document.getElementById('searchResults').classList.remove('hidden');
        });

        // Update student info
        function updateStudentInfo(student, studentId, selectedClass, selectedSubject) {
            const studentName = document.getElementById('studentName');
            const studentDetails = document.getElementById('studentDetails');
            
            if (student) {
                studentName.textContent = student.name;
                studentDetails.textContent = `‡∏£‡∏´‡∏±‡∏™: ${student.id} | ‡∏´‡πâ‡∏≠‡∏á: ${student.class} | ‡∏ß‡∏¥‡∏ä‡∏≤: ${student.subject}`;
            } else {
                studentName.textContent = `‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™ ${studentId}`;
                studentDetails.textContent = `‡∏£‡∏´‡∏±‡∏™: ${studentId} | ‡∏´‡πâ‡∏≠‡∏á: ${selectedClass || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'} | ‡∏ß‡∏¥‡∏ä‡∏≤: ${selectedSubject || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}`;
            }
        }

        // Calculate statistics
        function calculateStatistics(studentId, filteredAssignments) {
            let submitted = 0;
            let notSubmitted = 0;
            let overdue = 0;
            const today = new Date().toISOString().split('T')[0];
            
            filteredAssignments.forEach(assignment => {
                const submissionKey = `${studentId}-${assignment.id}`;
                const submission = submissions[submissionKey];
                
                if (submission && submission.submitted) {
                    submitted++;
                } else {
                    notSubmitted++;
                    if (assignment.dueDate < today) {
                        overdue++;
                    }
                }
            });
            
            const total = submitted + notSubmitted;
            const completionRate = total > 0 ? Math.round((submitted / total) * 100) : 0;
            
            return { submitted, notSubmitted, overdue, completionRate };
        }

        // Update statistics display
        function updateStatistics(stats) {
            document.getElementById('submittedCount').textContent = stats.submitted;
            document.getElementById('notSubmittedCount').textContent = stats.notSubmitted;
            document.getElementById('overdueCount').textContent = stats.overdue;
            document.getElementById('completionRate').textContent = stats.completionRate + '%';
        }

        // Render assignment cards
        function renderAssignmentCards(studentId, filteredAssignments) {
            const container = document.getElementById('assignmentCards');
            container.innerHTML = '';
            
            if (filteredAssignments.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-8 text-gray-500">
                        <div class="text-4xl mb-4">üìù</div>
                        <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</p>
                    </div>
                `;
                return;
            }
            
            const today = new Date().toISOString().split('T')[0];
            
            filteredAssignments.forEach(assignment => {
                const submissionKey = `${studentId}-${assignment.id}`;
                const submission = submissions[submissionKey];
                const isSubmitted = submission && submission.submitted;
                const isOverdue = assignment.dueDate < today && !isSubmitted;
                const daysUntilDue = Math.ceil((new Date(assignment.dueDate) - new Date(today)) / (1000 * 60 * 60 * 24));
                
                let statusClass = '';
                let statusIcon = '';
                let statusText = '';
                let borderClass = '';
                
                if (isSubmitted) {
                    statusClass = 'bg-green-100 text-green-800';
                    statusIcon = '‚úÖ';
                    statusText = '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß';
                    borderClass = 'border-l-green-500';
                } else if (isOverdue) {
                    statusClass = 'bg-red-100 text-red-800';
                    statusIcon = '‚è∞';
                    statusText = '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
                    borderClass = 'border-l-red-500';
                } else {
                    statusClass = 'bg-yellow-100 text-yellow-800';
                    statusIcon = '‚è≥';
                    statusText = '‡∏£‡∏≠‡∏™‡πà‡∏á';
                    borderClass = 'border-l-yellow-500';
                }
                
                const card = document.createElement('div');
                card.className = `bg-white rounded-lg shadow-md p-6 border-l-4 ${borderClass} hover:shadow-lg transition-shadow`;
                card.innerHTML = `
                    <div class="flex justify-between items-start mb-4">
                        <div class="flex-1">
                            <h4 class="text-lg font-semibold text-gray-800 mb-2">${assignment.name}</h4>
                            <div class="flex items-center space-x-4 text-sm text-gray-600 mb-3">
                                <span class="flex items-center">
                                    <span class="mr-1">üìö</span>
                                    ${assignment.subject}
                                </span>
                                <span class="flex items-center">
                                    <span class="mr-1">üè´</span>
                                    ${assignment.class}
                                </span>
                                <span class="flex items-center">
                                    <span class="mr-1">üìÖ</span>
                                    ${assignment.dueDate}
                                </span>
                            </div>
                            ${!isSubmitted && !isOverdue ? `
                                <div class="text-sm text-gray-500">
                                    ${daysUntilDue > 0 ? `‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${daysUntilDue} ‡∏ß‡∏±‡∏ô` : daysUntilDue === 0 ? '‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ' : ''}
                                </div>
                            ` : ''}
                        </div>
                        <div class="text-right">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${statusClass}">
                                <span class="mr-1">${statusIcon}</span>
                                ${statusText}
                            </span>
                            ${isSubmitted && submission.date ? `
                                <div class="text-xs text-gray-500 mt-2">
                                    ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${submission.date}
                                </div>
                            ` : ''}
                        </div>
                    </div>
                    
                    ${!isSubmitted ? `
                        <div class="bg-gray-50 rounded-lg p-3">
                            <div class="flex items-center text-sm text-gray-600">
                                <span class="mr-2">üí°</span>
                                <span>‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${isOverdue ? '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏π‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°' : '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î'}</span>
                            </div>
                        </div>
                    ` : `
                        <div class="bg-green-50 rounded-lg p-3">
                            <div class="flex items-center text-sm text-green-700">
                                <span class="mr-2">üéâ</span>
                                <span>‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</span>
                            </div>
                        </div>
                    `}
                `;
                
                container.appendChild(card);
            });
        }

        // Render results table
        function renderResultsTable(studentId, filteredAssignments) {
            const resultsTable = document.getElementById('resultsTable');
            resultsTable.innerHTML = '';
            
            filteredAssignments.forEach(assignment => {
                const submissionKey = `${studentId}-${assignment.id}`;
                const submission = submissions[submissionKey];
                const isSubmitted = submission && submission.submitted;
                const submissionDate = isSubmitted && submission.date ? submission.date : '-';
                
                const status = isSubmitted ? 
                    `<span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-sm">‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</span>` :
                    `<span class="px-2 py-1 bg-red-100 text-red-800 rounded-full text-sm">‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á</span>`;
                
                resultsTable.innerHTML += `
                    <tr class="border-b border-gray-200 hover:bg-gray-50">
                        <td class="px-4 py-3 font-medium">
                            <button onclick="showAssignmentDetail(${assignment.id}, '${studentId}')" 
                                    class="text-blue-600 hover:text-blue-800 hover:underline cursor-pointer text-left">
                                ${assignment.name}
                            </button>
                        </td>
                        <td class="px-4 py-3">${assignment.subject}</td>
                        <td class="px-4 py-3">${assignment.dueDate}</td>
                        <td class="px-4 py-3">${status}</td>
                        <td class="px-4 py-3 text-gray-600">${submissionDate}</td>
                    </tr>
                `;
            });
        }

        // Toggle view functionality
        document.addEventListener('DOMContentLoaded', function() {
            const toggleViewBtn = document.getElementById('toggleViewBtn');
            const assignmentCards = document.getElementById('assignmentCards');
            const tableView = document.getElementById('tableView');
            let isCardView = true;
            
            toggleViewBtn.addEventListener('click', () => {
                if (isCardView) {
                    assignmentCards.classList.add('hidden');
                    tableView.classList.remove('hidden');
                    toggleViewBtn.innerHTML = 'üìä ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î';
                    isCardView = false;
                } else {
                    assignmentCards.classList.remove('hidden');
                    tableView.classList.add('hidden');
                    toggleViewBtn.innerHTML = 'üìä ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á';
                    isCardView = true;
                }
            });
        });

        // Add assignment
        document.getElementById('addAssignmentBtn').addEventListener('click', async () => {
            const name = document.getElementById('assignmentName').value;
            const subject = document.getElementById('assignmentSubject').value;
            const className = document.getElementById('assignmentClass').value;
            const dueDate = document.getElementById('dueDate').value;
            
            if (name && subject && className && dueDate) {
                const newAssignment = {
                    id: assignments.length + 1,
                    name,
                    subject,
                    class: className,
                    dueDate
                };
                
                assignments.push(newAssignment);
                
                // Save to Firebase
                if (firebaseConnected && !isDemoMode) {
                    try {
                        const docId = await window.saveToFirestore('assignments', newAssignment);
                        newAssignment.firebaseId = docId;
                    } catch (error) {
                        console.error('Failed to save assignment to Firebase:', error);
                    }
                }
                
                // Clear form
                document.getElementById('assignmentName').value = '';
                document.getElementById('assignmentSubject').value = '';
                document.getElementById('assignmentClass').value = '';
                document.getElementById('dueDate').value = '';
                
                updateAssignmentFilters();
                renderAssignments();
                showNotification('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
            } else {
                showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'error');
            }
        });

        // Render assignments with grouping
        function renderAssignments() {
            const container = document.getElementById('assignmentsContainer');
            container.innerHTML = '';
            
            // Get filter values
            const filterClass = document.getElementById('filterClass')?.value || '';
            const filterSubject = document.getElementById('filterSubject')?.value || '';
            
            // Filter assignments
            let filteredAssignments = assignments;
            if (filterClass) {
                filteredAssignments = filteredAssignments.filter(a => a.class === filterClass);
            }
            if (filterSubject) {
                filteredAssignments = filteredAssignments.filter(a => a.subject === filterSubject);
            }
            
            if (filteredAssignments.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-12 text-gray-500">
                        <div class="text-4xl mb-4">üìù</div>
                        <p class="text-lg">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</p>
                        <p class="text-sm mt-2">‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</p>
                    </div>
                `;
                return;
            }
            
            // Group assignments by class and subject
            const groupedAssignments = {};
            
            filteredAssignments.forEach(assignment => {
                const groupKey = `${assignment.class}-${assignment.subject}`;
                if (!groupedAssignments[groupKey]) {
                    groupedAssignments[groupKey] = {
                        class: assignment.class,
                        subject: assignment.subject,
                        assignments: []
                    };
                }
                groupedAssignments[groupKey].assignments.push(assignment);
            });
            
            // Render each group
            Object.values(groupedAssignments).forEach(group => {
                const groupDiv = document.createElement('div');
                groupDiv.className = 'mb-8 bg-white rounded-xl shadow-lg overflow-hidden';
                
                // Calculate group statistics
                const totalAssignments = group.assignments.length;
                const studentsInGroup = students.filter(s => s.class === group.class && s.subject === group.subject);
                const totalStudents = studentsInGroup.length;
                
                let totalSubmissions = 0;
                let totalPossible = 0;
                
                group.assignments.forEach(assignment => {
                    studentsInGroup.forEach(student => {
                        const submissionKey = `${student.id}-${assignment.id}`;
                        const submission = submissions[submissionKey];
                        if (submission && submission.submitted) {
                            totalSubmissions++;
                        }
                        totalPossible++;
                    });
                });
                
                const completionRate = totalPossible > 0 ? Math.round((totalSubmissions / totalPossible) * 100) : 0;
                
                groupDiv.innerHTML = `
                    <!-- Group Header -->
                    <div class="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6">
                        <div class="flex justify-between items-start">
                            <div>
                                <h3 class="text-xl font-bold mb-2">üè´ ${group.class} - üìö ${group.subject}</h3>
                                <div class="flex items-center space-x-6 text-blue-100">
                                    <span class="flex items-center">
                                        <span class="mr-1">üë•</span>
                                        ${totalStudents} ‡∏Ñ‡∏ô
                                    </span>
                                    <span class="flex items-center">
                                        <span class="mr-1">üìù</span>
                                        ${totalAssignments} ‡∏á‡∏≤‡∏ô
                                    </span>
                                    <span class="flex items-center">
                                        <span class="mr-1">üìä</span>
                                        ${completionRate}% ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
                                    </span>
                                    ${firebaseConnected ? `
                                        <span class="flex items-center">
                                            <span class="mr-1">üî•</span>
                                            Firebase
                                        </span>
                                    ` : ''}
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="text-2xl font-bold">${completionRate}%</div>
                                <div class="text-sm text-blue-200">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô</div>
                            </div>
                        </div>
                        
                        <!-- Progress Bar -->
                        <div class="mt-4">
                            <div class="bg-blue-400 bg-opacity-30 rounded-full h-2">
                                <div class="bg-white rounded-full h-2 transition-all duration-300" 
                                     style="width: ${completionRate}%"></div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Assignments in Group -->
                    <div class="p-6">
                        <div class="space-y-6">
                            ${group.assignments.map(assignment => {
                                const studentsInClass = students.filter(s => s.class === assignment.class && s.subject === assignment.subject);
                                const submittedCount = studentsInClass.filter(student => {
                                    const submissionKey = `${student.id}-${assignment.id}`;
                                    const submission = submissions[submissionKey];
                                    return submission && submission.submitted;
                                }).length;
                                
                                const assignmentCompletionRate = studentsInClass.length > 0 ? 
                                    Math.round((submittedCount / studentsInClass.length) * 100) : 0;
                                
                                const today = new Date().toISOString().split('T')[0];
                                const isOverdue = assignment.dueDate < today;
                                const daysUntilDue = Math.ceil((new Date(assignment.dueDate) - new Date(today)) / (1000 * 60 * 60 * 24));
                                
                                let dueDateClass = '';
                                let dueDateIcon = '';
                                if (isOverdue) {
                                    dueDateClass = 'text-red-600 bg-red-50';
                                    dueDateIcon = '‚ö†Ô∏è';
                                } else if (daysUntilDue <= 3) {
                                    dueDateClass = 'text-orange-600 bg-orange-50';
                                    dueDateIcon = 'üî•';
                                } else {
                                    dueDateClass = 'text-blue-600 bg-blue-50';
                                    dueDateIcon = 'üìÖ';
                                }
                                
                                return `
                                    <div class="border border-gray-200 rounded-lg overflow-hidden">
                                        <!-- Assignment Header -->
                                        <div class="bg-gray-50 px-4 py-3 border-b">
                                            <div class="flex justify-between items-center">
                                                <div class="flex-1">
                                                    <h4 class="font-semibold text-gray-800 text-lg">${assignment.name}</h4>
                                                    <div class="flex items-center space-x-4 mt-1">
                                                        <span class="text-sm ${dueDateClass} px-2 py-1 rounded-full font-medium">
                                                            ${dueDateIcon} ${assignment.dueDate}
                                                            ${isOverdue ? ' (‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î)' : daysUntilDue <= 3 ? ` (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${daysUntilDue} ‡∏ß‡∏±‡∏ô)` : ''}
                                                        </span>
                                                        <span class="text-sm text-gray-600">
                                                            ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß: ${submittedCount}/${studentsInClass.length} ‡∏Ñ‡∏ô
                                                        </span>
                                                    </div>
                                                </div>
                                                <div class="text-right ml-4">
                                                    <div class="text-xl font-bold ${assignmentCompletionRate >= 80 ? 'text-green-600' : assignmentCompletionRate >= 50 ? 'text-yellow-600' : 'text-red-600'}">
                                                        ${assignmentCompletionRate}%
                                                    </div>
                                                    ${firebaseConnected ? `
                                                        <div class="text-xs text-orange-600 bg-orange-100 px-2 py-1 rounded mt-1">
                                                            üî• Firebase
                                                        </div>
                                                    ` : ''}
                                                </div>
                                            </div>
                                            
                                            <!-- Assignment Progress Bar -->
                                            <div class="mt-3">
                                                <div class="bg-gray-200 rounded-full h-2">
                                                    <div class="rounded-full h-2 transition-all duration-300 ${
                                                        assignmentCompletionRate >= 80 ? 'bg-green-500' : 
                                                        assignmentCompletionRate >= 50 ? 'bg-yellow-500' : 'bg-red-500'
                                                    }" style="width: ${assignmentCompletionRate}%"></div>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <!-- Students List -->
                                        <div class="p-4">
                                            <div class="grid gap-2">
                                                ${studentsInClass.map(student => {
                                                    const submissionKey = `${student.id}-${assignment.id}`;
                                                    const submission = submissions[submissionKey];
                                                    const isSubmitted = submission && submission.submitted;
                                                    
                                                    return `
                                                        <div class="flex items-center justify-between bg-gray-50 p-3 rounded-lg hover:bg-gray-100 transition-colors">
                                                            <div class="flex items-center space-x-3">
                                                                <div class="w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                                                                    isSubmitted ? 'bg-green-100 text-green-800' : 'bg-gray-200 text-gray-600'
                                                                }">
                                                                    ${isSubmitted ? '‚úì' : student.id.slice(-2)}
                                                                </div>
                                                                <div>
                                                                    <span class="font-medium text-gray-800">${student.name}</span>
                                                                    <div class="text-sm text-gray-500">‡∏£‡∏´‡∏±‡∏™: ${student.id}</div>
                                                                </div>
                                                            </div>
                                                            <div class="flex items-center space-x-3">
                                                                ${isSubmitted && submission.date ? `
                                                                    <span class="text-xs text-gray-500">
                                                                        ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${submission.date}
                                                                    </span>
                                                                ` : ''}
                                                                <button onclick="toggleSubmission('${submissionKey}')" 
                                                                        class="px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                                                                            isSubmitted ? 
                                                                            'bg-green-100 text-green-800 hover:bg-green-200 border border-green-300' : 
                                                                            'bg-red-100 text-red-800 hover:bg-red-200 border border-red-300'
                                                                        }">
                                                                    ${isSubmitted ? '‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á'}
                                                                </button>
                                                            </div>
                                                        </div>
                                                    `;
                                                }).join('')}
                                            </div>
                                        </div>
                                    </div>
                                `;
                            }).join('')}
                        </div>
                    </div>
                `;
                
                container.appendChild(groupDiv);
            });
        }
        
        // Update filter dropdowns for assignments
        function updateAssignmentFilters() {
            const filterClass = document.getElementById('filterClass');
            const filterSubject = document.getElementById('filterSubject');
            
            if (!filterClass || !filterSubject) return;
            
            // Store current values
            const currentClass = filterClass.value;
            const currentSubject = filterSubject.value;
            
            // Update class filter
            filterClass.innerHTML = '<option value="">‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</option>';
            const assignmentClasses = [...new Set(assignments.map(a => a.class))];
            assignmentClasses.forEach(cls => {
                filterClass.innerHTML += `<option value="${cls}" ${cls === currentClass ? 'selected' : ''}>${cls}</option>`;
            });
            
            // Update subject filter
            filterSubject.innerHTML = '<option value="">‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤</option>';
            const assignmentSubjects = [...new Set(assignments.map(a => a.subject))];
            assignmentSubjects.forEach(subj => {
                filterSubject.innerHTML += `<option value="${subj}" ${subj === currentSubject ? 'selected' : ''}>${subj}</option>`;
            });
            
            // Add event listeners
            filterClass.addEventListener('change', renderAssignments);
            filterSubject.addEventListener('change', renderAssignments);
        }

        // Toggle submission status
        async function toggleSubmission(submissionKey) {
            if (!submissions[submissionKey]) {
                submissions[submissionKey] = { submitted: false };
            }
            
            submissions[submissionKey].submitted = !submissions[submissionKey].submitted;
            
            if (submissions[submissionKey].submitted) {
                submissions[submissionKey].date = new Date().toISOString().split('T')[0];
            }
            
            // Save to Firebase
            if (firebaseConnected && !isDemoMode) {
                try {
                    await window.saveToFirestore('submissions', {
                        key: submissionKey,
                        submitted: submissions[submissionKey].submitted,
                        date: submissions[submissionKey].date || null
                    });
                } catch (error) {
                    console.error('Failed to save submission to Firebase:', error);
                }
            }
            
            renderAssignments();
            showNotification('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }

        // Show assignment detail modal
        function showAssignmentDetail(assignmentId, studentId) {
            const assignment = assignments.find(a => a.id === assignmentId);
            const student = students.find(s => s.id === studentId);
            const submissionKey = `${studentId}-${assignmentId}`;
            const submission = submissions[submissionKey];
            
            if (!assignment) return;
            
            const today = new Date().toISOString().split('T')[0];
            const isSubmitted = submission && submission.submitted;
            const isOverdue = assignment.dueDate < today && !isSubmitted;
            const daysUntilDue = Math.ceil((new Date(assignment.dueDate) - new Date(today)) / (1000 * 60 * 60 * 24));
            
            // Update modal content
            document.getElementById('modalTitle').textContent = assignment.name;
            document.getElementById('modalSubtitle').textContent = `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô - ${student ? student.name : `‡∏£‡∏´‡∏±‡∏™ ${studentId}`}`;
            
            document.getElementById('modalAssignmentName').textContent = assignment.name;
            document.getElementById('modalSubject').textContent = assignment.subject;
            document.getElementById('modalClass').textContent = assignment.class;
            document.getElementById('modalDueDate').textContent = assignment.dueDate;
            
            // Update status
            const statusCard = document.getElementById('modalStatusCard');
            const statusBadge = document.getElementById('modalStatusBadge');
            const statusIcon = document.getElementById('modalStatusIcon');
            const submissionDate = document.getElementById('modalSubmissionDate');
            
            if (isSubmitted) {
                statusCard.className = 'rounded-lg p-4 bg-green-50 border border-green-200';
                statusBadge.className = 'px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800';
                statusBadge.textContent = '‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß';
                statusIcon.textContent = 'üéâ';
                submissionDate.textContent = `‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${submission.date}`;
            } else if (isOverdue) {
                statusCard.className = 'rounded-lg p-4 bg-red-50 border border-red-200';
                statusBadge.className = 'px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800';
                statusBadge.textContent = '‚è∞ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
                statusIcon.textContent = 'üò∞';
                submissionDate.textContent = '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á';
            } else {
                statusCard.className = 'rounded-lg p-4 bg-yellow-50 border border-yellow-200';
                statusBadge.className = 'px-3 py-1 rounded-full text-sm font-medium bg-yellow-100 text-yellow-800';
                statusBadge.textContent = '‚è≥ ‡∏£‡∏≠‡∏™‡πà‡∏á';
                statusIcon.textContent = 'üìù';
                submissionDate.textContent = '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á';
            }
            
            // Update time info
            const daysInfo = document.getElementById('modalDaysInfo');
            const advice = document.getElementById('modalAdvice');
            
            if (isSubmitted) {
                const submittedDays = Math.ceil((new Date(submission.date) - new Date(assignment.dueDate)) / (1000 * 60 * 60 * 24));
                if (submittedDays <= 0) {
                    daysInfo.textContent = `‡∏™‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${Math.abs(submittedDays)} ‡∏ß‡∏±‡∏ô`;
                } else {
                    daysInfo.textContent = `‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${submittedDays} ‡∏ß‡∏±‡∏ô`;
                }
                advice.textContent = 'üéâ ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß';
                advice.className = 'mt-2 font-medium text-green-700';
            } else if (isOverdue) {
                const overdueDays = Math.abs(daysUntilDue);
                daysInfo.textContent = `‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ${overdueDays} ‡∏ß‡∏±‡∏ô`;
                advice.textContent = '‚ö†Ô∏è ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏π‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°';
                advice.className = 'mt-2 font-medium text-red-700';
            } else {
                if (daysUntilDue > 0) {
                    daysInfo.textContent = `‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å ${daysUntilDue} ‡∏ß‡∏±‡∏ô`;
                    if (daysUntilDue <= 3) {
                        advice.textContent = 'üî• ‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô! ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î';
                        advice.className = 'mt-2 font-medium text-orange-700';
                    } else {
                        advice.textContent = 'üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
                        advice.className = 'mt-2 font-medium text-blue-700';
                    }
                } else if (daysUntilDue === 0) {
                    daysInfo.textContent = '‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!';
                    advice.textContent = 'üö® ‡∏î‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å! ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ';
                    advice.className = 'mt-2 font-medium text-red-700';
                }
            }
            
            // Show modal
            document.getElementById('assignmentModal').classList.remove('hidden');
        }
        
        // Close assignment detail modal
        function closeAssignmentModal() {
            document.getElementById('assignmentModal').classList.add('hidden');
        }
        
        // Close modal when clicking outside
        document.getElementById('assignmentModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeAssignmentModal();
            }
        });

        // Close Firebase setup modal when clicking outside
        document.getElementById('firebaseSetupModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeFirebaseSetup();
            }
        });

        // Initialize
        loadSampleData();
        updateAllDropdowns();
        renderClassList();
        renderSubjectList();
        updateAssignmentFilters();
        renderAssignments();
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'97b775b157ddee21',t:'MTc1NzI2MTI1My4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
